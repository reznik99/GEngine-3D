#version 400 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void){

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	//diffuse and ambient lighting
	float nDotl = dot(unitNormal, unitLightVector);
	float brightness = max(nDotl, 0.2); //0.2 is ambient lighting
	
	vec3 diffuse = brightness*lightColor;
	
	//Specular lighting
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitVectorToCamera;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	
	float dampedFactor = pow(specularFactor, shineDamper);
	
	vec3 finalSpecular = dampedFactor * reflectivity * lightColor;
	
	//for transparency
	//vec4 textureColour = vec4(0.0, 0.6, 0.8, 0.5);//texture(modelTexture,pass_textureCoordinates);
	//if(textureColour.a<0.5){
		//discard;
	//}
	
	vec4 testColour = vec4(0, 1, 1, 1);
	
	out_Color = vec4(diffuse, .50) * testColour;//vec4(diffuse, .50) * testColour + vec4(finalSpecular, 0.5);
	
}



