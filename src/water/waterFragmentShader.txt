#version 400 core

in vec4 clipSpace;
in vec2 textureCoords;

out vec4 out_Color;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D depthMap;

uniform float offset;

const float waveStrength = 0.02;
const vec4 waterColour = vec4(0.0, 0.1, 0.3, 1);
const float depthVisibility = 150;

void main(void){

	vec2 ndc = (clipSpace.xy/clipSpace.w)/2.0 + 0.5;
	
	vec2 reflectTexCoords = vec2(ndc.x, -ndc.y);
	vec2 refractTexCoords = vec2(ndc.x, ndc.y);
	
	//depth effects on water
	float near = 0.1f;
	float far = 1000;
	float depth = texture(depthMap, refractTexCoords).r;
	float floorDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	depth = gl_FragCoord.z;
	float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	float waterDepth = floorDistance - waterDistance;
	
	//reflection refraction 
	vec2 distortion1 = (texture(dudvMap, vec2(textureCoords.x+offset, textureCoords.y)).rg * 2.0 - 1.0) * waveStrength;
	vec2 distortion2= (texture(dudvMap, vec2(-textureCoords.x+offset, textureCoords.y+offset)).rg * 2.0 - 1.0) * waveStrength;
	vec2 distortion = distortion1 + distortion2;

	reflectTexCoords += distortion;
	reflectTexCoords.x = clamp(reflectTexCoords.x, 0.001, 0.999);
	reflectTexCoords.y = clamp(reflectTexCoords.y, -0.999, -0.001);
	refractTexCoords += distortion;
	refractTexCoords = clamp(refractTexCoords, 0.001, 0.999);
	
	vec4 reflectionColour = texture(reflectionTexture, reflectTexCoords);
	vec4 refractionColour = texture(refractionTexture, refractTexCoords);
	
	refractionColour = mix(refractionColour, waterColour, clamp(waterDepth/depthVisibility, 0.0, 1.0));

	out_Color = mix(reflectionColour, refractionColour, 1 - clamp(waterDepth/depthVisibility, 0.0, 0.75f));
	
}



